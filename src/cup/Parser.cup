/*************/
/* Based on a template by Oren Ish-Shalom */
/*************/


/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{

        switch (this.lexer.yystate()) {
            case Lexer.MULTICOMMENTS:
            case Lexer.MULTICOMMENTSSECOUND:
                System.err.print("Syntax error at line " + (lexer.multiCommentStartLine+1) + " of input. Lexer\n");
                break;
            default:
                System.err.print("Syntax error at line " + lexer.getLine() + " of input.\n"); //parser

        }
        System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
    try {
	s = lexer.next_token();
	// System.out.print(s.sym);
	// System.out.print("[");
	// System.out.print(lexer.getLine());
	// System.out.print(":");
	// System.out.print(lexer.getCharPos());
	// System.out.print("] ");
	// System.out.print(sym.terminalNames[s.sym]);
	// if (s.value != null)
	// {
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	// }
	// System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input.\n"); //Lexer
         System.exit(1);
         return null;
     }
:};

/*************/
/* TERMINALS */
/*************/
terminal PLUS, MINUS, MULT;
terminal LPAREN, RPAREN;
terminal LPARENSQUARE, RPARENSQUARE;
terminal LPARENCURL, RPARENCURL;
terminal PUBLIC, STATIC, VOID, RETURN;
terminal CLASS, MAIN;
terminal Integer NUMBER;
terminal STRING, INT, BOOLEAN;
terminal WHILE, ELSE, IF;
terminal SYSOUT;
terminal SEMICOLON;
terminal ASSIGN;
terminal EXTENDS;
terminal String ID;
terminal COMMA, DOT;
terminal TRUE, FALSE;
terminal THIS, NEW;
terminal NOT;
terminal LENGTH;
terminal AND, LESSTHAN;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal Expr expr;
non terminal Statement statement;
non terminal AstType astType;
non terminal MethodDecl methodDecl;
non terminal VarDecl varDecl;
non terminal ClassDecl classDecl;
non terminal MainClass mainClass;
non terminal Program program;
non terminal FormalArg formalArg;

non terminal LinkedList<Expr> commaexprlist;
non terminal LinkedList<FormalArg> formalArglist;
non terminal LinkedList<MethodDecl> methodlist;
non terminal LinkedList<Statement> statementlist;
non terminal LinkedList<VarDecl> varlist;
non terminal LinkedList<ClassDecl> classlist;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/

precedence nonassoc ASSIGN;
precedence nonassoc AND;
precedence left LESSTHAN;
precedence left PLUS, MINUS;
precedence left MULT;
precedence left NOT, NEW;
precedence left DOT;

/************************/
/* INITIAL NON TERMINAL */
/************************/
start with program;

/********************/
/* PRODUCTION RULES */
/********************/

program ::= mainClass:m classlist:clist {: RESULT = new Program(m,clist); :}
;

mainClass ::= CLASS ID:d1 LPARENCURL PUBLIC STATIC VOID MAIN LPAREN STRING LPARENSQUARE RPARENSQUARE ID:d2 RPAREN LPARENCURL statement:s RPARENCURL RPARENCURL {: RESULT = new MainClass(d1,d2,s); :}
;

classDecl ::= CLASS ID:d1 EXTENDS ID:d2 LPARENCURL varlist:vlist methodlist:mlist RPARENCURL {: RESULT = new ClassDecl(d1,d2,vlist,mlist); :}
                | CLASS ID:d1 LPARENCURL varlist:vlist methodlist:mlist RPARENCURL {: RESULT = new ClassDecl(d1,null,vlist,mlist); :}
;

varDecl ::= astType:t1 ID:d1 SEMICOLON {: RESULT = new VarDecl(t1,d1,t1left); :}
;

methodDecl ::= PUBLIC astType:t1 ID:d1 LPAREN formalArg:a1 formalArglist:alist RPAREN LPARENCURL varlist:vlist statementlist:slist RETURN expr:e1 SEMICOLON RPARENCURL{: alist.addFirst(a1); RESULT = new MethodDecl(t1,d1,alist,vlist,slist,e1,t1left); :}
            | PUBLIC astType:t1 ID:d1 LPAREN formalArglist:alist RPAREN LPARENCURL varlist:vlist statementlist:slist RETURN expr:e1 SEMICOLON RPARENCURL{: RESULT = new MethodDecl(t1,d1,alist,vlist,slist,e1,t1left); :}
;

astType ::= INT LPARENSQUARE RPARENSQUARE {: RESULT = new IntArrayAstType(); :}
            | BOOLEAN {: RESULT = new BoolAstType(); :}
            | INT {: RESULT = new IntAstType(); :}
            | ID:d1 {: RESULT = new RefType(d1); :}
;

statement ::= ID:d1 ASSIGN expr:e1 SEMICOLON {: RESULT = new AssignStatement(d1,e1); :}
            | LPARENCURL statementlist:slist RPARENCURL {: RESULT = new BlockStatement(slist); :}
            | IF LPAREN expr:e1 RPAREN statement:s1 ELSE statement:s2 {: RESULT = new IfStatement(e1,s1,s2); :}
            | WHILE LPAREN expr:e1 RPAREN statement:s1 {: RESULT = new WhileStatement(e1,s1); :}
            | SYSOUT LPAREN expr:e1 RPAREN SEMICOLON {: RESULT = new SysoutStatement(e1); :}
            | ID:d1 LPARENSQUARE expr:e1 RPARENSQUARE ASSIGN expr:e2 SEMICOLON {: RESULT = new AssignArrayStatement(d1,e1,e2); :}
;

formalArg  ::= astType:t1 ID:d1 {: RESULT = new FormalArg(t1,d1,t1left); :}
;

expr ::= expr:e1 PLUS expr:e2 		{: RESULT = new AddExpr(e1, e2); :}
         | expr:e1 MINUS expr:e2	{: RESULT = new SubtractExpr(e1, e2); :}
         | expr:e1 MULT expr:e2		{: RESULT = new MultExpr(e1, e2); :}
         | expr:e1 AND expr:e2      {: RESULT = new AndExpr(e1, e2); :}
         | expr:e1 LESSTHAN expr:e2 {: RESULT = new LtExpr(e1, e2); :}
         | LPAREN expr:e RPAREN		{: RESULT = e; :}
         | NUMBER:n					{: RESULT = new IntegerLiteralExpr(n.intValue()); :}
         | expr:e1 LPARENSQUARE expr:e2 RPARENSQUARE {: RESULT = new ArrayAccessExpr(e1, e2); :}
         | expr:e1 DOT LENGTH {: RESULT = new ArrayLengthExpr(e1); :}
         | expr:e1 DOT ID:d1 LPAREN expr:e2 commaexprlist:clist RPAREN {: clist.addFirst(e2); RESULT = new MethodCallExpr(e1,d1,clist); :}
         | expr:e1 DOT ID:d1 LPAREN commaexprlist:clist RPAREN {: RESULT = new MethodCallExpr(e1,d1,clist); :}
         | TRUE {: RESULT = new TrueExpr(); :}
         | FALSE {: RESULT = new FalseExpr(); :}
         | ID:d1 {: RESULT = new IdentifierExpr(d1); :}
         | THIS {: RESULT = new ThisExpr(); :}
         | NEW INT LPARENSQUARE expr:e1 RPARENSQUARE {: RESULT = new NewIntArrayExpr(e1); :}
         | NEW ID:d1 LPAREN RPAREN{: RESULT = new NewObjectExpr(d1); :}
         | NOT expr:e1 {: RESULT = new NotExpr(e1); :}
;

commaexprlist ::= COMMA expr: e commaexprlist:el {: el.addFirst(e); RESULT = el; :}
		 | /* empty */           	{: RESULT = new LinkedList<Expr>(); :}
;

formalArglist ::= COMMA formalArg:a formalArglist:el {: el.addFirst(a); RESULT = el; :}
		 | /* empty */           	{: RESULT = new LinkedList<FormalArg>(); :}
;

classlist ::=  classlist :clist classDecl: c1 {: clist.add(c1); RESULT = clist; :}
		 | /* empty */           	{: RESULT = new LinkedList<ClassDecl>(); :}
;

varlist ::= varlist :clist varDecl: c1 {:  clist.add(c1); RESULT = clist; :}
		 | /* empty */           	{: RESULT = new LinkedList<VarDecl>(); :}
;

statementlist ::= statement:s1 statementlist:clist {: RESULT = clist; clist.addFirst(s1);  :}
		 | /* empty */           	{: RESULT = new LinkedList<Statement>(); :}
;

methodlist ::= methodDecl: c1 methodlist :clist {: RESULT = clist; clist.addFirst(c1); :}
		 | /* empty */           	{: RESULT = new LinkedList<MethodDecl>(); :}
;